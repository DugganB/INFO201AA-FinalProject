#################
#### PART 3 #####
#################
#3.1 creates a variable that contains 1 - 201
numbers <- 1:201
#3.2 creates a variable that contains previous variable values squared
squared.numbers <- numbers * numbers
#3.3 creates a variable that contains the mean of the squared numbers
squared.mean <- mean(squared.numbers)
print(squared.mean)
#3.4 creates a variables squares that contains only the values in numbers
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
# 4.1 creates a variable that holds the first day of spring break
spring.break <- as.Date("2018-03-17")
# 4.2 creates a variable of today's date
today <- Sys.Date()
# 4.3
days.to.break <- spring.break - today
print(days.to.break)
# 4.4
MakeBirthdayIntro <- function(person.name,person.age,person.birthday){
days.to.birthday <- person.birthday - today
# If birthday already passed, set to next year by subtracting from 365
if(days.to.birthday <0){
days.to.birthday <- 365 + days.to.birthday
}
birthday.phrase <- paste(MakeIntroduction(person.name,person.age),
"in", days.to.birthday,"days, I'll be", (person.age +1))
return(birthday.phrase)
}
birth.day <- as.Date("2018-10-31")
my.bday.intro <- MakeBirthdayIntro(my.name,my.age,birth.day)
print(my.bday.intro)
install.packages('nycflights13')
library('nycflights13')
data.flights <- flights
nrow(data.flights)
ncol(data.flights)
colnames(data.flights)
??flights
store.flights <-mutate(data.flights, amtgained = arr_delay - dep_delay)
library('dplyr')
store.flights <-mutate(data.flights, amtgained = arr_delay - dep_delay)
store.flights
store.flights$amtgained
sorted.flights <-arrange(store.flight,amtgained)
sorted.flights <-arrange(store.flights,amtgained)
sorted.flights
sorted.flights$amtgained
sorted.flights2 <- mutate(data.flights, amtgained = arr_delay - dep_delay) %>%
arrange(store.flights, amtgained)
sorted.flights2$amtgained
hist(flights$gained)
hist(flights$amtgained)
hist(data.flights$amtgained)
hist(stored.flights$amtgained)
hist(store.flights$amtgained)
hist(sorted.flights2$amtgained)
sorted.flights2 <- mutate(data.flights, amtgained = arr_delay - dep_delay) %>%
arrange( amtgained)
sorted.flights2$amtgained
hist(sorted.flights2$amtgained)
hist(store.flights$amtgained)
summarize(store.flights, mean = mean(gained, na.rm = TRUE))
summarize(store.flights, mean = mean(amtgained, na.rm = TRUE))
s.flights <- flights
s.flights <- flights
library(nycflights13)
library(dplyr)
s.flights <- flights
dep.delay.by.month <- group_by(s.flights,month) %>%
summarize(average = mean(s.flights$dep_delay))
dep.delay.by.month
dep.delay.by.month <- group_by(s.flights,month) %>%
summarize(average = mean(dep_delay))
dep.delay.by.month
dep.delay.by.month <- group_by(s.flights,month) %>%
summarize(mean = mean(dep_delay))
dep.delay.by.month
avg.arr.del <- flights %>%
group_by(flights$dest) %>%
summarize( mean = mean(arr_delay, na.rm = TRUE))
avg.arr.del
join.arr.del <- avg.arr.del %>%
mutate(faa = flights$dest) %>%
left_join(airports, by = 'faa') %>%
arrange(-avg)
join.arr.del <- avg.arr.del %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
arrange(-avg)
avg.arr.del <- flights %>%
group_by(flights$dest) %>%
summarize( avg = mean(arr_delay, na.rm = TRUE))%>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
arrange(-avg)
shiny::runApp('C:/Users/willi/Desktop/uwhw/info201/ch16-shiny/exercise-3')
runApp('C:/Users/willi/Desktop/uwhw/info201/ch16-shiny/exercise-3')
runApp('C:/Users/willi/Desktop/uwhw/info201/ch16-shiny/exercise-3')
shiny::runApp('C:/Users/willi/Desktop/uwhw/info201/a7-data-app-WILLIAMNGUYEN18')
runApp('C:/Users/willi/Desktop/uwhw/info201/a7-data-app-WILLIAMNGUYEN18')
runApp('C:/Users/willi/Desktop/uwhw/info201/a7-data-app-WILLIAMNGUYEN18')
runApp('C:/Users/willi/Desktop/uwhw/info201/a7-data-app-WILLIAMNGUYEN18')
library(shiny)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(maps)
# raw data
data.raw <- read.csv('data/WDI_emissions_Data.csv', stringsAsFactors = FALSE)
codes.raw <- read.csv('data/WDI_emissions_Definition and Source.csv', stringsAsFactors = FALSE)
codes.filt <- select(codes.raw, ï..Code, Indicator.Name)
data.test <- filter(data.raw,Series.Code == "EN.ATM.CO2E.KT")
data.onlycodes <- select(data.raw, Series.Code)
colnames(data.onlycodes)[1] = "Codes"
colnames(codes.filt)[1] = "Codes"
# Joining the two csvs by "Codes" to get the indicator names.
# And then mutating the data to include this new column of indicator names
data.join <- left_join(data.onlycodes, codes.filt )
data.codechange <- data.raw
colnames(data.codechange)[2] = "Codes"
data.clean <- mutate(data.codechange, indicator.name = data.join$Indicator.Name)
colnames(data.clean)[3] = 1998
colnames(data.clean)[4] = 1999
colnames(data.clean)[5] = 2000
colnames(data.clean)[6] = 2001
colnames(data.clean)[7] = 2002
colnames(data.clean)[8] = 2003
colnames(data.clean)[9] = 2004
colnames(data.clean)[10] = 2005
colnames(data.clean)[11] = 2006
colnames(data.clean)[12] = 2007
colnames(data.clean)[13] = 2008
colnames(data.clean)[14] = 2009
colnames(data.clean)[15] = 2010
colnames(data.clean)[16] = 2011
colnames(data.clean)[17] = 2012
colnames(data.clean)[18] = 2013
colnames(data.clean)[19] = 2014
# data.clean <- semi_join(data.codechange, data.join)
ind.names <- select(codes.filt, Indicator.Name) %>%
as.vector()
# View(ind.names)
colnames(data.clean)[1] = "country.codes"
# View(codes.filt)
# should focus on "CO2 emissions (metric tons per capita)" and "CO2 emissions (kt)".
# View(data.clean)
#
# View(data.test)
# View(world.iso)
# Grab the ISO3 Code
# n == 3, a == country.codes vector
# iso.codes <- iso.alpha(countries, n =3)
# data.test <- filter(data.clean, indicator.name == "CO2 emissions (kt)")
# View(data.test)
# countries <- select(data.clean, country.codes) %>%
#   as.vector()
# View(countries)
#
# typeof(countries)
# View(t(iso.codes))
# print(iso.codes)
# worldmap <- map_data("world")
# worldname <- select(worldmap, region)
# # View(worldmap)
# # View(worldname)
# world.iso <- iso.alpha(worldname, n =3)
View(data.clean)
runApp('C:/Users/willi/Desktop/uwhw/info201/a7-data-app-WILLIAMNGUYEN18')
library(shiny)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(maps)
# raw data
data.raw <- read.csv('data/WDI_emissions_Data.csv', stringsAsFactors = FALSE)
codes.raw <- read.csv('data/WDI_emissions_Definition and Source.csv', stringsAsFactors = FALSE)
codes.filt <- select(codes.raw, ï..Code, Indicator.Name)
data.test <- filter(data.raw,Series.Code == "EN.ATM.CO2E.KT")
data.onlycodes <- select(data.raw, Series.Code)
colnames(data.onlycodes)[1] = "Codes"
colnames(codes.filt)[1] = "Codes"
# Joining the two csvs by "Codes" to get the indicator names.
# And then mutating the data to include this new column of indicator names
data.join <- left_join(data.onlycodes, codes.filt )
data.codechange <- data.raw
colnames(data.codechange)[2] = "Codes"
data.clean <- mutate(data.codechange, indicator.name = data.join$Indicator.Name)
colnames(data.clean)[3] = 1998
colnames(data.clean)[4] = 1999
colnames(data.clean)[5] = 2000
colnames(data.clean)[6] = 2001
colnames(data.clean)[7] = 2002
colnames(data.clean)[8] = 2003
colnames(data.clean)[9] = 2004
colnames(data.clean)[10] = 2005
colnames(data.clean)[11] = 2006
colnames(data.clean)[12] = 2007
colnames(data.clean)[13] = 2008
colnames(data.clean)[14] = 2009
colnames(data.clean)[15] = 2010
colnames(data.clean)[16] = 2011
colnames(data.clean)[17] = 2012
colnames(data.clean)[18] = 2013
colnames(data.clean)[19] = 2014
# data.clean <- semi_join(data.codechange, data.join)
ind.names <- select(codes.filt, Indicator.Name) %>%
as.vector()
# View(ind.names)
colnames(data.clean)[1] = "country.codes"
# View(codes.filt)
View(data.clean)
# should focus on "CO2 emissions (metric tons per capita)" and "CO2 emissions (kt)".
# View(data.clean)
#
# View(data.test)
# View(world.iso)
# Grab the ISO3 Code
# n == 3, a == country.codes vector
# iso.codes <- iso.alpha(countries, n =3)
# data.test <- filter(data.clean, indicator.name == "CO2 emissions (kt)")
# View(data.test)
# countries <- select(data.clean, country.codes) %>%
#   as.vector()
# View(countries)
#
# typeof(countries)
# View(t(iso.codes))
# print(iso.codes)
worldmap <- map_data("world")
worldname <- select(worldmap, region)
# View(worldmap)
# View(worldname)
# world.iso <- iso.alpha(worldname, n =3)
worldmap <- map_data("world")
worldname <- select(worldmap, region)
View(worldmap)
library(shiny)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(maps)
worldmap <- map_data("world")
View(worldmap)
library(shiny)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(maps)
worldmap <- map_data("world")
worldname <- select(worldmap, region)
View(worldname)
worldname <- select(worldmap, region)
View(world.iso)
View(worldname)
typeof(worldmap)
worldmap <- map_data("world")
worldname <-select(worldmap, region)
library(shiny)
library(shiny)
library(ggplot2)
library(dplyr)
library("maps")
worldmap <- map_data("world")
worldname <-select(worldmap, region)
typeof(worldname)
typeof(worldmap)
worldname <-as.vector(select(worldmap, region))
typeof(worldname)
worldmap <- map_data("world")
worldname <-as.vector(select(worldmap, region))
typeof(worldname)
worldname <-as.vector(select(worldmap, region))
typeof(worldname)
worldmap <- map_data("world")
worldname <-select(worldmap, region)
worldname <- unlist(worldname, use.names=FALSE)
View(worldname)
typeof(worldname)
View(worldname)
worldmap <- map_data("world")
worldname <- pull(worldmap, region)
View(worldname)
typeof(worldname)
View(worldname)
View(worldmap)
worldmap <- map_data("world")
worldname <- pull(region, worldmap)
View(worldname)
typeof(worldname)
worldmap <- map_data("world")
worldname <- pull(region, worldmap)
View(worldname)
typeof(worldname)
View(worldname)
worldmanp$region
View(worldman$region)
View(worldma$region)
View(worldmap$region)
worldmap <- map_data("world")
View(worldmap)
type(worldmap)
typeof(worldmap)
worldmap <- as.data.frame(map_data("world"))
View(worldmap)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
worldname <- select(worldmap, region)
typeof(worldmap)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
worldname <- select(worldmap, region)
typeof(worldmap)
worldmap <- data.frame(map_data("world"), stringsAsFactor = FALSE)
typeof(worldmap)
worldmap <- data.frame(unlist(map_data("world")), stringsAsFactor = FALSE)
worldmap <- data.frame(map_data("world"), stringsAsFactor = FALSE)
worldmap <- data.frame(unlist(map_data("world")), stringsAsFactor = FALSE)
typeof(worldmap)
worldmap <- as.data.frame(unlist(map_data("world")), stringsAsFactor = FALSE)
typeof(worldmap)
runApp('C:/Users/willi/Desktop/uwhw/info201/a7-data-app-WILLIAMNGUYEN18')
View(worldmap)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
typeof(worldmap)
worldmap <- data.frame(map_data("world"))
typeof(worldmap)
test <- map_data("world")
typeof(test)
View(test)
rbindlist(test, fill = TRUE)
test <- lapply(test, data.frame)
typeof(test)
test1 <- lapply(test, data.frame)
typeof(test1)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
# worldname <- pull(region, worldmap)
worldname <- select(worldmap, region)
View(worldmap)
worldname <- worldmap[5]
View(worldname)
typeof(worldname)
worldname <- as.vector(worldmap[5])
typeof(worldname)
worldname <- unlist(worldmap[5])
typeof(worldname)
worldname <- as.vector(worldname)
typeof(worldname)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
# worldname <- pull(region, worldmap)
worldname <- as.vector(worldmap[5])
# typeof(worldmap)
# View(worldmap)
# View(worldname)
# typeof(worldname)
# ?geom_polygon()
# iso.alpha takes in a vector of country names
world.iso.alpha <- iso.alpha(worldname, n = 3)
View(world.iso.alpha)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
# worldname <- pull(region, worldmap)
worldname <- as.vector(worldmap[5])
is.vector(worldname)
worldasdf <- unlist(worldname)
is.vector(worldasdf)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
# worldname <- pull(region, worldmap)
worldname <- as.vector(worldmap[5])
#
worldasdf <- unlist(as.vector(worldmap[5]))
is.vector(worldasdf)
worldasdf <- unlist(worldmap[5])
is.vector(worldasdf)
worldmap <- as.data.frame(map_data("world"), stringsAsFactor = FALSE)
# worldname <- pull(region, worldmap)
worldname <- unlist(worldmap[5])
# typeof(worldmap)
typeof(worldname)
is.vector(worldname)
View(worldname)
world.iso.alpha <- iso.alpha(worldname, n = 3)
View(world.iso.alpha)
print(world.iso.alpha)
typeof(world.iso.alpha)
world.fuck.iso <- as.vector(world.iso.alpha)
typeof(world.iso.alpha)
View(world.fuck.iso)
world.fuck.iso <- as.list(world.iso.alpha)
View(world.fuck.iso)
typeof(world.fuck.iso)
world.fuck.iso <- as.data.frame(world.iso.alpha)
typeof(world.fuck.iso)
world.fuck.iso <- as.data.frame(world.iso.alpha)
View(world.fuck.iso)
world.join <- mutate(world.map, iso = world.fuck.iso)
world.join <- mutate(worldmap, iso = world.fuck.iso)
world.join <- mutate(worldmap, iso = world.fuck.iso)
world.join <- mutate(worldmap, iso = world.fuck.iso)
world.fuck.iso <- as.vector(world.iso.alpha)
shiny::runApp('C:/Users/willi/Desktop/uwhw/info201/a7-data-app-WILLIAMNGUYEN18')
setwd("C:/Users/willi/Desktop/uwhw/info201/INFO201AA-FinalProject")
library("dplyr")
library("ggplot2")
library("shiny")
data.raw <- read.csv("crypto-markets.csv", stringsAsFactors = FALSE)
data.100 <- filter(as.data.frame(data.raw, stringsAsFactors = FALSE), ranknow <= 100)
View(data.100)
data.coins <- filter(data.100, date == "2018-02-05") %>%
select(slug)
SumYear <- function(year){
nextyear <- year +1
introdate <- paste0(year,"-01-01")
enddate <- paste0(nextyear, "-01-01")
data.year <- filter(data.100, date > introdate & date < enddate)
data.year.sum <- group_by(data.year, slug)%>%
summarize(spreadmax = max(spread),
spreadmin = min(spread),
spreadmed = median(spread),
spreadavg = mean(spread))
return(data.year.sum)
}
data.2013.sum <- SumYear(2013)
data.2014.sum <- SumYear(2014)
data.2015.sum <- SumYear(2015)
data.2016.sum <- SumYear(2016)
data.2017.sum <- SumYear(2017)
data.2018.sum <- SumYear(2018)
CoinData <- function(coinslugone, coinslugtwo, startdate, enddate){
data.coin = filter(data.100, slug == coinslugone | slug == coinslugtwo,
date > startdate & date < enddate)
return(data.coin)
}
test <- CoinData("bitcoin", "ethereum", "2017-01-01", "2018-02-05")
ggplot(data = test) +
geom_line(aes(x = date, y = spread, group = slug, color = slug))
ggplot(data = test) +
geom_line(aes (x = date, y = high, group = slug, color = slug))
ggplot(data = test) +
geom_line(aes(x = date, y = spread, group = slug, color = slug))
bitcoinscalar <- max(data.100$high)
testcoin <- "ethereum"
data.testscalar <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / max(spread))
testcoinscalar <- filter(data.100, slug == testcoin)%>%
max(spread)
testcoinscalar <- filter(data.100, slug == testcoin)
View(testcoinscalar)
View(testcoinscalar)
testcoinscalar <- filter(data.100, slug == testcoin) %>%
summarize(max(spread))
View(testcoinscalar)
data.testscalar <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / testcoinscalar)
ggplot(data = data.testscalar) +
geom_line (aes(x = date, y= scaled.spread, group = slug, color = slug))
data.testscalar <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / testcoinscalar)
View(data.testscalar)
data.testscalar <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / max(spread))
ggplot(data = data.testscalar) +
geom_line (aes(x = date, y= scaled.spread, group = slug, color = slug))
ggplot(data = data.100) +
geom_line(aes(x = date, y = spread, group = slug, color = slug))
ggplot(data = data.testscalar) +
geom_line (aes(x = date, y= scaled.spread, group = slug, color = slug))
ggplot(data = data.testscalar) +
geom_line (aes(x = scaled.price, y = scaled.spread, group = slug, color = slug))
ggplot(data = data.testscalar) +
geom_line (aes(y = scaled.price, x = scaled.spread, group = slug, color = slug))
ggplot(data = data.testscalar) +
geom_line (aes(x = scaled.price, y = scaled.spread, group = slug, color = slug))
data.testscalar <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / testcoinscalar)
ggplot(data = data.testscalar) +
geom_line (aes(x = date, y= scaled.spread, group = slug, color = slug))
data.testscalar <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / max(spread))
ggplot(data = data.testscalar) +
geom_line (aes(x = date, y= scaled.spread, group = slug, color = slug))
ggplot(data = data.testscalar) +
geom_line (aes(x = scaled.price, y = scaled.spread, group = slug, color = slug))
ggplot(data = data.testscalar) +
geom_line (aes(x = date, y= scaled.spread, group = slug, color = slug))
testcoinfilter <- filter(data.100, slug == testcoin) %>%
View(testcoinscalar)
testcoinfilter <- filter(data.100, slug == testcoin)
testcoinscalar <- max(testcoinfilter)
View(testcoinscalar)
testcoinscalar <- as.double(max(testcoinfilter))
testcoinfilter <- filter(data.100, slug == testcoin)
testcoinscalar <- max(testcoinfilter)
View(testcoinscalar)
typeof(testcoinscalar)
testcoinfilter <- filter(data.100, slug == testcoin)
testcoinscalar.wtf <- max(testcoinfilter)
testcoinscalar <- as.double(unlist(testcoinscalar.wtf))
testcoinscalar.wtf <- max(testcoinfilter)
testcoinfilter <- filter(data.100, slug == testcoin)
testcoinscalar.wtf <- as.double(max(testcoinfilter$spread))
testcoinscalar <- as.double(max(testcoinfilter$spread))
data.testscalar <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / testcoinscalar)
data.testmaxspread <- filter(data.100, slug == "bitcoin" | slug == testcoin) %>%
mutate(scaled.price = high / bitcoinscalar, scaled.spread = spread / testcoinscalar)
ggplot(data = data.testmaxspread) +
geom_line (aes(x = date, y= scaled.spread, group = slug, color = slug))
ggplot(data = data.testmaxspread) +
geom_line (aes(x = scaled.price, y= scaled.spread, group = slug, color = slug))
